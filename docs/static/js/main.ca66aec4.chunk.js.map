{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","types","name","key","inputs","react_default","a","createElement","dist_vkui","type","top","placeholder","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","onChange","bind","assertThisInitialized","onSubmit","e","_e$currentTarget","currentTarget","value","setState","defineProperty","fetch","method","headers","Content-Type","body","JSON","stringify","objectSpread","_this$state","email","purpose","activePanel","id","theme","map","item","index","undefined","Item","size","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ca66aec4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport '@vkontakte/vkui/dist/vkui.css';\nimport {View, Panel, PanelHeader, FormLayout, Input, FormLayoutGroup, Select, Radio, Textarea, Checkbox, Link, Button} from \"@vkontakte/vkui\";\n\nconst types = [\n  {\n    name: \"Количество задержанных\",\n    key: \"z\",\n    inputs: [\n      <Input\n          type=\"text\"\n          top=\"Количество задержанных\"\n          placeholder=\"Количество задержанных\"\n          name=\"value\"\n      />\n    ]\n  },\n  {\n    name: \"Количество пострадавших\",\n    key: \"p_chely\",\n    inputs: [\n      <Input\n          type=\"text\"\n          top=\"Количество пострадавших\"\n          placeholder=\"Количество пострадавших\"\n          name=\"value\"\n      />\n    ]\n  },\n  {\n    name: \"Количество пострадавших (полиция)\",\n    key: \"p_mysor\",\n    inputs: [\n      <Input\n          type=\"text\"\n          top=\"Количество пострадавших (полиция)\"\n          placeholder=\"Количество пострадавших (полиция)\"\n          name=\"value\"\n      />\n    ]\n  },\n  {\n    name: \"Всего участников\",\n    key: \"total\",\n    inputs: [\n      <Input\n          type=\"text\"\n          top=\"Всего участников\"\n          placeholder=\"Всего участников\"\n          name=\"value\"\n      />\n    ]\n  }\n];\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      type: 0\n    };\n\n    this.onChange = this.onChange.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  onChange(e) {\n    const { name, value } = e.currentTarget;\n    this.setState({ [name]: value });\n  }\n\n  onSubmit() {\n    let key = types[this.state.type].key;\n    if(key !== \"news\"){\n      fetch(\"http://84.201.149.111:1337/updateData\", {\n        method: \"POST\",\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          key,\n          ...this.state\n        })\n      });\n    }\n  }\n\n  render() {\n    const { email, purpose } = this.state;\n\n    return (\n        <View activePanel=\"new-user\">\n          <Panel id=\"new-user\" theme=\"white\">\n            <PanelHeader>Регистрация</PanelHeader>\n            <FormLayout>\n              <Input\n                  type=\"text\"\n                  top=\"Токен\"\n                  placeholder=\"Токен\"\n                  name=\"token\"\n              />\n              <Select name=\"type\" value={this.state.type} onChange={this.onChange} top=\"Данные\" placeholder=\"Данные\">\n                {types.map((item, index) => {\n                  return(<option key={index} value={index}>{item.name}</option>)\n                })}\n              </Select>\n              {this.state.type !== undefined &&\n                types[this.state.type].inputs.map((Item, value) => {\n                  return(Item)\n                })\n              }\n              <Button size=\"xl\" onClick={this.onSubmit}>Обновить информацию</Button>\n            </FormLayout>\n          </Panel>\n        </View>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}